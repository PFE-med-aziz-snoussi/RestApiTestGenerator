{
  "info": {
    "name": "API Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Add a new pet to the store-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet",
        "method": "POST",
        "body": {
          "mode": "raw",
          "raw": "{\"id\":1637092664,\"name\":\"qwpdiQj4fw\",\"category\":{\"id\":1399046426,\"name\":\"X7y9XC92wN\"},\"tags\":[{\"id\":804408741,\"name\":\"8tiwoudiEW\"}],\"status\":\"available\"}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\t\tvar responseBody = pm.response.json();\n\t\tpm.test(\"id has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody['id']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['id']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"id not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"name has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('name')) {\n\t\t\t\tpm.expect(typeof responseBody['name']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('name')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['name']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"name not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"photoUrls est un tableau\", function () {\n\t\t\tpm.expect(Array.isArray(responseBody['photoUrls'])).to.be.true;\n\t\t});\n\t\tpm.test(\"tags est un tableau\", function () {\n\t\t\tpm.expect(Array.isArray(responseBody['tags'])).to.be.true;\n\t\t});\n\t\tpm.test(\"status has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody['status']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['status']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"status not found in responseBody\");\n\t\t\t}\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n\t\t\tpm.collectionVariables.set(\"petid\", responseBody.id);\n\t\t\tpm.collectionVariables.set(\"petname\", responseBody.name);\n\t\t\tpm.collectionVariables.set(\"petcategoryid\", responseBody.category.id);\n\t\t\tpm.collectionVariables.set(\"petcategoryname\", responseBody.category.name);\n\t\t\tpm.collectionVariables.set(\"petphotoUrls\", responseBody.photoUrls[0]);\n\t\t\tpm.collectionVariables.set(\"pettagsid\", responseBody.tags[0].id);\n\t\t\tpm.collectionVariables.set(\"pettagsname\", responseBody.tags[0].name);\n\t\t\tpm.collectionVariables.set(\"petstatus\", responseBody.status);\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Add a new pet to the store-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet",
        "method": "POST",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Add a new pet to the store-422 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet",
        "method": "POST",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 422\", function () {\n\t\t\tpm.response.to.have.status(422);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Updates a pet in the store with form data-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/{{petid}}",
        "method": "POST",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "uploads an image-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/{{petid}}/uploadImage?additionalMetadata={{petadditionalMetadata}}",
        "method": "POST",
        "header": [
          {
            "value": "application/octet-stream",
            "key": "Content-Type"
          }
        ],
        "body": {
          "mode": "file",
          "file": {
            "src": "/C:/Users/ffsga/Downloads/capp.jpg"
          }
        },
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\t\tvar responseBody = pm.response.json();\n\t\tpm.test(\"code has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('code')) {\n\t\t\t\tpm.expect(typeof responseBody['code']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('code')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['code']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"code not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"type has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('type')) {\n\t\t\t\tpm.expect(typeof responseBody['type']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('type')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['type']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"type not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"message has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('message')) {\n\t\t\t\tpm.expect(typeof responseBody['message']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('message')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['message']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"message not found in responseBody\");\n\t\t\t}\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Place an order for a pet-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/order",
        "method": "POST",
        "body": {
          "mode": "raw",
          "raw": "{\"id\":1108037199,\"petId\":215505105,\"quantity\":1228358945,\"shipDate\":\"2023-10-21T13:56:06.834Z\",\"status\":\"delivered\",\"complete\":true}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\t\tvar responseBody = pm.response.json();\n\t\tpm.test(\"id has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody['id']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['id']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"id not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"petId has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('petId')) {\n\t\t\t\tpm.expect(typeof responseBody['petId']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('petId')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['petId']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"petId not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"quantity has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('quantity')) {\n\t\t\t\tpm.expect(typeof responseBody['quantity']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('quantity')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['quantity']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"quantity not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"shipDate has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('shipDate')) {\n\t\t\t\tpm.expect(typeof responseBody['shipDate']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('shipDate')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['shipDate']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"shipDate not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"status has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody['status']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['status']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"status not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"complete has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('complete')) {\n\t\t\t\tpm.expect(typeof responseBody['complete']).to.equal('boolean');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('complete')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['complete']).to.equal('boolean');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"complete not found in responseBody\");\n\t\t\t}\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n\t\t\tpm.collectionVariables.set(\"storeid\", responseBody.id);\n\t\t\tpm.collectionVariables.set(\"storepetId\", responseBody.petId);\n\t\t\tpm.collectionVariables.set(\"storequantity\", responseBody.quantity);\n\t\t\tpm.collectionVariables.set(\"storeshipDate\", responseBody.shipDate);\n\t\t\tpm.collectionVariables.set(\"storestatus\", responseBody.status);\n\t\t\tpm.collectionVariables.set(\"storecomplete\", responseBody.complete);\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Place an order for a pet-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/order",
        "method": "POST",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Place an order for a pet-422 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/order",
        "method": "POST",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 422\", function () {\n\t\t\tpm.response.to.have.status(422);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Create user-default Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user",
        "method": "POST",
        "body": {
          "mode": "raw",
          "raw": "{\"id\":593091656,\"username\":\"amGXR1KVHM\",\"firstName\":\"yTYqaUqHur\",\"lastName\":\"8pe0Bc1iMc\",\"email\":\"QMkVYS8z@vermeg.com\",\"password\":\"zIfjBoW1i7\",\"phone\":\"58104822\",\"userStatus\":958036137}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\t\tvar responseBody = pm.response.json();\n\t\tpm.test(\"id has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody['id']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['id']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"id not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"username has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('username')) {\n\t\t\t\tpm.expect(typeof responseBody['username']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('username')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['username']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"username not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"firstName has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('firstName')) {\n\t\t\t\tpm.expect(typeof responseBody['firstName']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('firstName')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['firstName']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"firstName not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"lastName has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('lastName')) {\n\t\t\t\tpm.expect(typeof responseBody['lastName']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('lastName')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['lastName']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"lastName not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"email has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('email')) {\n\t\t\t\tpm.expect(typeof responseBody['email']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('email')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['email']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"email not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"password has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('password')) {\n\t\t\t\tpm.expect(typeof responseBody['password']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('password')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['password']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"password not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"phone has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('phone')) {\n\t\t\t\tpm.expect(typeof responseBody['phone']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('phone')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['phone']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"phone not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"userStatus has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('userStatus')) {\n\t\t\t\tpm.expect(typeof responseBody['userStatus']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('userStatus')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['userStatus']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"userStatus not found in responseBody\");\n\t\t\t}\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n\t\t\tpm.collectionVariables.set(\"userid\", responseBody.id);\n\t\t\tpm.collectionVariables.set(\"username\", responseBody.username);\n\t\t\tpm.collectionVariables.set(\"userfirstName\", responseBody.firstName);\n\t\t\tpm.collectionVariables.set(\"userlastName\", responseBody.lastName);\n\t\t\tpm.collectionVariables.set(\"useremail\", responseBody.email);\n\t\t\tpm.collectionVariables.set(\"userpassword\", responseBody.password);\n\t\t\tpm.collectionVariables.set(\"userphone\", responseBody.phone);\n\t\t\tpm.collectionVariables.set(\"userStatus\", responseBody.userStatus);\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Creates list of users with given input array-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/createWithList",
        "method": "POST",
        "body": {
          "mode": "raw",
          "raw": "[{\"id\":1909369705,\"username\":\"VuAM8MhAd8\",\"firstName\":\"62HBVevUm9\",\"lastName\":\"x5uudRCKet\",\"email\":\"6XfPqm11@yahoo.com\",\"password\":\"koCvEoWP3I\",\"phone\":\"28721360\",\"userStatus\":1601523777}]",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\t\tvar responseBody = pm.response.json();\n\t\tpm.test(\"id has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody['id']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['id']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"id not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"username has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('username')) {\n\t\t\t\tpm.expect(typeof responseBody['username']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('username')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['username']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"username not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"firstName has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('firstName')) {\n\t\t\t\tpm.expect(typeof responseBody['firstName']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('firstName')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['firstName']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"firstName not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"lastName has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('lastName')) {\n\t\t\t\tpm.expect(typeof responseBody['lastName']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('lastName')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['lastName']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"lastName not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"email has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('email')) {\n\t\t\t\tpm.expect(typeof responseBody['email']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('email')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['email']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"email not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"password has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('password')) {\n\t\t\t\tpm.expect(typeof responseBody['password']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('password')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['password']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"password not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"phone has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('phone')) {\n\t\t\t\tpm.expect(typeof responseBody['phone']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('phone')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['phone']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"phone not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"userStatus has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('userStatus')) {\n\t\t\t\tpm.expect(typeof responseBody['userStatus']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('userStatus')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['userStatus']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"userStatus not found in responseBody\");\n\t\t\t}\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Creates list of users with given input array-default Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/createWithList",
        "method": "POST",
        "body": {
          "mode": "raw",
          "raw": "[{\"id\":1125292476,\"username\":\"dFodqYVPYV\",\"firstName\":\"gjg1InpMFw\",\"lastName\":\"M2f62rwrqI\",\"email\":\"vxnAnGkZ@yahoo.com\",\"password\":\"Rs5vo2218R\",\"phone\":\"04722105\",\"userStatus\":2041894599}]",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Update an existing pet-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet",
        "method": "PUT",
        "body": {
          "mode": "raw",
          "raw": "{\"id\":\"{{petid}}\",\"name\":\"{{petname}}\",\"category\":{\"id\":\"{{petcategoryid}}\",\"name\":\"{{petcategoryname}}\"},\"photoUrls\":[\"{{petphotoUrls}}\"],\"tags\":[{\"id\":\"{{pettagsid}}\",\"name\":\"{{pettagsname}}\"}],\"status\":\"{{petstatus}}\"}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\t\tvar responseBody = pm.response.json();\n\t\tpm.test(\"id has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody['id']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['id']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"id not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"name has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('name')) {\n\t\t\t\tpm.expect(typeof responseBody['name']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('name')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['name']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"name not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"photoUrls est un tableau\", function () {\n\t\t\tpm.expect(Array.isArray(responseBody['photoUrls'])).to.be.true;\n\t\t});\n\t\tpm.test(\"tags est un tableau\", function () {\n\t\t\tpm.expect(Array.isArray(responseBody['tags'])).to.be.true;\n\t\t});\n\t\tpm.test(\"status has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody['status']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['status']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"status not found in responseBody\");\n\t\t\t}\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n\t\t\tpm.collectionVariables.set(\"petid\", responseBody.id);\n\t\t\tpm.collectionVariables.set(\"petname\", responseBody.name);\n\t\t\tpm.collectionVariables.set(\"petcategoryid\", responseBody.category.id);\n\t\t\tpm.collectionVariables.set(\"petcategoryname\", responseBody.category.name);\n\t\t\tpm.collectionVariables.set(\"petphotoUrls\", responseBody.photoUrls[0]);\n\t\t\tpm.collectionVariables.set(\"pettagsid\", responseBody.tags[0].id);\n\t\t\tpm.collectionVariables.set(\"pettagsname\", responseBody.tags[0].name);\n\t\t\tpm.collectionVariables.set(\"petstatus\", responseBody.status);\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Update an existing pet-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet",
        "method": "PUT",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Update an existing pet-404 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet",
        "method": "PUT",
        "body": {
          "mode": "raw",
          "raw": "{\"id\":\"0\",\"name\":\"{{petname}}\",\"category\":{\"id\":\"{{petcategoryid}}\",\"name\":\"{{petcategoryname}}\"},\"photoUrls\":[\"{{petphotoUrls}}\"],\"tags\":[{\"id\":\"{{pettagsid}}\",\"name\":\"{{pettagsname}}\"}],\"status\":\"{{petstatus}}\"}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 404\", function () {\n\t\t\tpm.response.to.have.status(404);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Update an existing pet-422 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet",
        "method": "PUT",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 422\", function () {\n\t\t\tpm.response.to.have.status(422);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Update user-default Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/{{username}}",
        "method": "PUT",
        "body": {
          "mode": "raw",
          "raw": "{\"id\":\"{{userid}}\",\"username\":\"{{username}}\",\"firstName\":\"{{userfirstName}}\",\"lastName\":\"{{userlastName}}\",\"email\":\"{{useremail}}\",\"password\":\"{{userpassword}}\",\"phone\":\"{{userphone}}\",\"userStatus\":\"{{userStatus}}\"}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n\t\t\tpm.collectionVariables.set(\"userid\", responseBody.id);\n\t\t\tpm.collectionVariables.set(\"username\", responseBody.username);\n\t\t\tpm.collectionVariables.set(\"userfirstName\", responseBody.firstName);\n\t\t\tpm.collectionVariables.set(\"userlastName\", responseBody.lastName);\n\t\t\tpm.collectionVariables.set(\"useremail\", responseBody.email);\n\t\t\tpm.collectionVariables.set(\"userpassword\", responseBody.password);\n\t\t\tpm.collectionVariables.set(\"userphone\", responseBody.phone);\n\t\t\tpm.collectionVariables.set(\"userStatus\", responseBody.userStatus);\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Directory Traversal",
      "event": [],
      "item": [
        {
          "name": "Check vulnerability with relative path",
          "request": {
            "url": "https://petstore3.swagger.io/api/v3",
            "method": "GET"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var _ = require('lodash');\nfunction urlJoin(a, b) {\n  return _.trimEnd(a, '/') + '/' + _.trimStart(b, '/');\n}\n\npm.test(\"checks vulnerability with relative path\", function () {\n    const response = cheerio.load(pm.response.text(), {\n        ignoreWhitespace: true,\n        xmlMode: true\n    });\n\n    const imageTags = Object.values(response(\"img\"));\n    let vulnerableResource = \"\";\n    for (var i = 0; i < imageTags.length; i++) {\n        if (imageTags[i].type === \"tag\" && imageTags[i].name === \"img\") {\n            const src = imageTags[i].attribs.src;\n            if (src && src.indexOf(\"cdn\") === -1 && src.indexOf(\"?\") !== -1) {\n                vulnerableResource = src;\n                break;\n            }\n        }\n    }\n    vulnerableResource = vulnerableResource.substr(0, vulnerableResource.lastIndexOf(\"=\") + 1)\n\n    const pathsToCheck = [\n        { path: '../../../etc/passwd', type: 'Linux passwd file' },\n        { path: '../../../etc/shadow', type: 'Linux shadow file' },\n        { path: '../../../etc/hosts', type: 'Linux hosts file' },\n        { path: '../../../etc/profile', type: 'Linux profile file' },\n        { path: '../../../etc/apache2/httpd.conf', type: 'Apache httpd.conf file' },\n        { path: '../../../windows/win.ini', type: 'Windows win.ini file' },\n        { path: '../../../../../windows/system.ini', type: 'Windows system.ini file' },\n        { path: '../../../var/www/html/admin/get.inc', type: 'Web server include file' },\n        { path: '../../../var/www/html/get.php', type: 'PHP file' }\n    ];\n\n    let vulnerabilityFound = false;\n    let vulnerabilityType = \"\";\n\n    for(var i=0; i<pathsToCheck.length; i++){\n        const { path, type } = pathsToCheck[i];\n        const vulnerable_url = urlJoin(urlJoin(\"https://petstore3.swagger.io/api/v3\",vulnerableResource), path);\n\n        pm.sendRequest(vulnerable_url, function (err, value) {\n            if (value) {\n                pm.expect(value.code).to.not.equal(200);\n                if(value.code === \"200\"){\n                    vulnerabilityFound = true;\n                    vulnerabilityType = type;\n                }\n            }\n        });\n    }\n\n    pm.test(\"Vulnerability check\", function () {\n        pm.expect(vulnerabilityFound).to.be.false;\n        if (vulnerabilityFound) {\n            pm.assert.fail(`Vulnerability found: ${vulnerabilityType}`);\n        } else {\n            pm.expect(true).to.be.true; // Dummy assertion to ensure test passes if no vulnerability is found\n        }\n    });\n});"
                ]
              }
            }
          ]
        },
        {
          "name": "Check vulnerability with Absolute path",
          "request": {
            "url": "https://petstore3.swagger.io/api/v3",
            "method": "GET"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var _ = require('lodash');\n\nfunction urlJoin(a, b) {\n  return _.trimEnd(a, '/') + '/' + _.trimStart(b, '/');\n}\n\nconst response = cheerio.load(pm.response.text(), {\n    ignoreWhitespace: true,\n    xmlMode: true\n});\n\nconst imageTags = Object.values(response(\"img\"));\nlet vulnerableResource = \"\";\nfor (var i = 0; i < imageTags.length; i++) {\n    if (imageTags[i].type === \"tag\" && imageTags[i].name === \"img\") {\n        const src = imageTags[i].attribs.src;\n        if (src && src.indexOf(\"cdn\") === -1 && src.indexOf(\"?\") !== -1) {\n            vulnerableResource = src;\n            break;\n        }\n    }\n}\n\nvulnerableResource = vulnerableResource.substr(0, vulnerableResource.lastIndexOf(\"=\") + 1)\n\nconst vulnerable_url = urlJoin(urlJoin(\"https://petstore3.swagger.io/api/v3\",vulnerableResource),\"/etc/passwd\")\npm.sendRequest(vulnerable_url, function (err, value) {\n    if (value) {\n        if(value.code === 200){\n        templateValue.text = `Maybe your API is vulnerable to directory traversal attacks. vulnerability fount at this endpoint ${vulnerable_url}`\n        }\n        pm.test(\"checks vulnerability with absolute path\", function () {\n            pm.expect(value.code).to.not.equal(200);\n        });\n    }\n});\n"
                ]
              }
            }
          ]
        },
        {
          "name": "Check vulnerability with sequences stripped non-recursively",
          "request": {
            "url": "https://petstore3.swagger.io/api/v3",
            "method": "GET"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var _ = require('lodash');\n\nfunction urlJoin(a, b) {\n  return _.trimEnd(a, '/') + '/' + _.trimStart(b, '/');\n}\n\nconst response = cheerio.load(pm.response.text(), {\n    ignoreWhitespace: true,\n    xmlMode: true\n});\n\nconst imageTags = Object.values(response(\"img\"));\nlet vulnerableResource = \"\";\nfor (var i = 0; i < imageTags.length; i++) {\n    if (imageTags[i].type === \"tag\" && imageTags[i].name === \"img\") {\n        const src = imageTags[i].attribs.src;\n        if (src && src.indexOf(\"cdn\") === -1 && src.indexOf(\"?\") !== -1) {\n            vulnerableResource = src;\n            break;\n        }\n    }\n}\n\nvulnerableResource = vulnerableResource.substr(0, vulnerableResource.lastIndexOf(\"=\") + 1)\n\nconst vulnerable_url = urlJoin(urlJoin(\"https://petstore3.swagger.io/api/v3\",vulnerableResource),\"....//....//....//etc/passwd\")\npm.sendRequest(vulnerable_url, function (err, value) {\n    if (value) {\n        if(value.code === 200){\n        templateValue.text = `Maybe your API is vulnerable to directory traversal attacks. vulnerability fount at this endpoint ${vulnerable_url}`\n        }\n        pm.test(\"checks vulnerability with sequences stripped non-recursively\", function () {\n            pm.expect(value.code).to.not.equal(200);\n        });\n    }\n});\n"
                ]
              }
            }
          ]
        },
        {
          "name": "Check vulnerability for sequences stripped with superfluous URL-decode",
          "request": {
            "url": "https://petstore3.swagger.io/api/v3",
            "method": "GET"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var _ = require('lodash');\n\nfunction urlJoin(a, b) {\n  return _.trimEnd(a, '/') + '/' + _.trimStart(b, '/');\n}\n\nconst response = cheerio.load(pm.response.text(), {\n    ignoreWhitespace: true,\n    xmlMode: true\n});\n\nconst imageTags = Object.values(response(\"img\"));\nlet vulnerableResource = \"\";\nfor (var i = 0; i < imageTags.length; i++) {\n    if (imageTags[i].type === \"tag\" && imageTags[i].name === \"img\") {\n        const src = imageTags[i].attribs.src;\n        if (src && src.indexOf(\"cdn\") === -1 && src.indexOf(\"?\") !== -1) {\n            vulnerableResource = src;\n            break;\n        }\n    }\n}\n\nvulnerableResource = vulnerableResource.substr(0, vulnerableResource.lastIndexOf(\"=\") + 1)\n\nconst vulnerable_url = urlJoin(urlJoin(\"https://petstore3.swagger.io/api/v3\",vulnerableResource),\"..%252f..%252f..%252fetc/passwd\")\n\npm.sendRequest(vulnerable_url, function (err, value) {\n    if (value) {\n        if(value.code === 200){\n        templateValue.text = `Maybe your API is vulnerable to directory traversal attacks. vulnerability fount at this endpoint ${vulnerable_url}`\n        }\n        pm.test(\"checks vulnerability for sequences stripped with superfluous URL-decode\", function () {\n            pm.expect(value.code).to.not.equal(200);\n        });\n    }\n});\n"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Security Headers",
      "event": [],
      "item": [
        {
          "name": "Check vulnerability with relative path",
          "request": {
            "url": "https://petstore3.swagger.io/api/v3",
            "method": "GET"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('checks for Content-Security-Policy header', function () {\n  pm.expect(pm.response.headers.get('Content-Security-Policy')).not.equal(undefined);\n});\npm.test(\"checks for X-Frame-Options header\", function() {\n    const header = pm.response.headers.get(\"X-Frame-Options\") || \"\";\n    pm.expect(header).equal('DENY')\n});\n\npm.test(\"checks for Strict-Transport-Security header\", function() {\n    const header = pm.response.headers.get(\"Strict-Transport-Security\") || \"\";\n    pm.expect(header.toLowerCase()).contains(\"max-age\")\n});\n\npm.test(\"checks for X-XSS-Protection header\", function() {\n    pm.expect(pm.response.headers.get(\"X-XSS-Protection\")).not.equal(undefined)\n});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "CORS Misconfiguration",
      "event": [],
      "item": [
        {
          "name": "Trusted origin Test",
          "request": {
            "url": "https://petstore3.swagger.io/api/v3",
            "method": "GET"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"checks vulnerability with trusted null origin\", function() {\n    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(\"null\");\n    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Credentials\")).to.be.oneOf([undefined,'false']);\n});\n\npm.test(\"checks vulnerability with trusted * origin\", function() {\n    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(\"*\");\n    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Credentials\")).to.be.oneOf([undefined,'false']);\n});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "CSP Evaluator",
      "event": [],
      "item": [
        {
          "name": "Evaluate CSP",
          "request": {
            "url": "https://csper.io/api/evaluations",
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"URL\":\"https://petstore3.swagger.io\"}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const response = JSON.parse(pm.response.text());\nconst {stats} = response;\n\npm.test(\"checks for CSP threats\", function() {\n    pm.expect(stats.totalHigh).to.be.equal(0);\n});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Finds Pets by status - SQL injection Test",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/findByStatus?status={{petstatus}}'+OR+1=1--",
        "method": "GET"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"check vulnerability with SQL injection\", function() {\n    pm.expect(pm.response.code).to.not.equal(200);\n});"
            ]
          }
        }
      ]
    },
    {
      "name": "Finds Pets by status-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/findByStatus?status={{petstatus}}",
        "method": "GET",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Finds Pets by status-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/findByStatus",
        "method": "GET",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Finds Pets by tags - SQL injection Test",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/findByTags?tags=SFG4lVw4wi'+OR+1=1--",
        "method": "GET"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"check vulnerability with SQL injection\", function() {\n    pm.expect(pm.response.code).to.not.equal(200);\n});"
            ]
          }
        }
      ]
    },
    {
      "name": "Finds Pets by tags-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/findByTags?tags=ABOi3Eovr5",
        "method": "GET",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Finds Pets by tags-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/findByTags",
        "method": "GET",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Find pet by ID - SQL injection Test",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/{{petid}}'+OR+1=1--",
        "method": "GET"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"check vulnerability with SQL injection\", function() {\n    pm.expect(pm.response.code).to.not.equal(200);\n});"
            ]
          }
        }
      ]
    },
    {
      "name": "Find pet by ID-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/{{petid}}",
        "method": "GET",
        "auth": {
          "type": "apiKey",
          "apiKey": [
            {
              "key": "key",
              "value": "value",
              "type": "string"
            },
            {
              "key": "value",
              "value": "{{apiKey}}",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\t\tvar responseBody = pm.response.json();\n\t\tpm.test(\"id has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody['id']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['id']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"id not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"name has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('name')) {\n\t\t\t\tpm.expect(typeof responseBody['name']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('name')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['name']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"name not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"photoUrls est un tableau\", function () {\n\t\t\tpm.expect(Array.isArray(responseBody['photoUrls'])).to.be.true;\n\t\t});\n\t\tpm.test(\"tags est un tableau\", function () {\n\t\t\tpm.expect(Array.isArray(responseBody['tags'])).to.be.true;\n\t\t});\n\t\tpm.test(\"status has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody['status']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['status']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"status not found in responseBody\");\n\t\t\t}\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Find pet by ID-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/{{petid}}",
        "method": "GET",
        "auth": {
          "type": "apiKey",
          "apiKey": [
            {
              "key": "key",
              "value": "value",
              "type": "string"
            },
            {
              "key": "value",
              "value": "{{apiKey}}",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Find pet by ID-404 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/-1",
        "method": "GET",
        "auth": {
          "type": "apiKey",
          "apiKey": [
            {
              "key": "key",
              "value": "value",
              "type": "string"
            },
            {
              "key": "value",
              "value": "{{apiKey}}",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 404\", function () {\n\t\t\tpm.response.to.have.status(404);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Deletes a pet-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/pet/{{petid}}",
        "method": "DELETE",
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "authUrl",
              "value": "https://petstore3.swagger.io/oauth/authorize",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "write:pets read:pets ",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "implicit",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Returns pet inventories by status-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/inventory",
        "method": "GET",
        "auth": {
          "type": "apiKey",
          "apiKey": [
            {
              "key": "key",
              "value": "value",
              "type": "string"
            },
            {
              "key": "value",
              "value": "{{apiKey}}",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Find purchase order by ID - SQL injection Test",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/order/{{orderid}}'+OR+1=1--",
        "method": "GET"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"check vulnerability with SQL injection\", function() {\n    pm.expect(pm.response.code).to.not.equal(200);\n});"
            ]
          }
        }
      ]
    },
    {
      "name": "Find purchase order by ID-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/order/{{orderid}}",
        "method": "GET",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\t\tvar responseBody = pm.response.json();\n\t\tpm.test(\"id has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody['id']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['id']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"id not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"petId has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('petId')) {\n\t\t\t\tpm.expect(typeof responseBody['petId']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('petId')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['petId']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"petId not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"quantity has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('quantity')) {\n\t\t\t\tpm.expect(typeof responseBody['quantity']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('quantity')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['quantity']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"quantity not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"shipDate has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('shipDate')) {\n\t\t\t\tpm.expect(typeof responseBody['shipDate']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('shipDate')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['shipDate']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"shipDate not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"status has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody['status']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('status')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['status']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"status not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"complete has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('complete')) {\n\t\t\t\tpm.expect(typeof responseBody['complete']).to.equal('boolean');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('complete')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['complete']).to.equal('boolean');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"complete not found in responseBody\");\n\t\t\t}\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Find purchase order by ID-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/order/{{orderid}}",
        "method": "GET",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Find purchase order by ID-404 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/order/-1",
        "method": "GET",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 404\", function () {\n\t\t\tpm.response.to.have.status(404);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete purchase order by ID-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/order/{{orderid}}",
        "method": "DELETE",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete purchase order by ID-404 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/store/order/-1",
        "method": "DELETE",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 404\", function () {\n\t\t\tpm.response.to.have.status(404);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Logs user into the system - SQL injection Test",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/login?username={{username}}'+OR+1=1--&password={{userpassword}}'+OR+1=1--",
        "method": "GET"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"check vulnerability with SQL injection\", function() {\n    pm.expect(pm.response.code).to.not.equal(200);\n});"
            ]
          }
        }
      ]
    },
    {
      "name": "Logs user into the system-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/login?username={{username}}&password={{userpassword}}",
        "method": "GET",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Logs user into the system-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/login",
        "method": "GET",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Logs out current logged in user session-default Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/logout",
        "method": "GET",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Get user by user name - SQL injection Test",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/{{username}}'+OR+1=1--",
        "method": "GET"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"check vulnerability with SQL injection\", function() {\n    pm.expect(pm.response.code).to.not.equal(200);\n});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get user by user name-200 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/{{username}}",
        "method": "GET",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 200\", function () {\n\t\t\tpm.response.to.have.status(200);\n\t\t});\n\t\tvar responseBody = pm.response.json();\n\t\tpm.test(\"id has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody['id']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('id')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['id']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"id not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"username has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('username')) {\n\t\t\t\tpm.expect(typeof responseBody['username']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('username')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['username']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"username not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"firstName has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('firstName')) {\n\t\t\t\tpm.expect(typeof responseBody['firstName']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('firstName')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['firstName']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"firstName not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"lastName has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('lastName')) {\n\t\t\t\tpm.expect(typeof responseBody['lastName']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('lastName')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['lastName']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"lastName not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"email has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('email')) {\n\t\t\t\tpm.expect(typeof responseBody['email']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('email')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['email']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"email not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"password has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('password')) {\n\t\t\t\tpm.expect(typeof responseBody['password']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('password')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['password']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"password not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"phone has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('phone')) {\n\t\t\t\tpm.expect(typeof responseBody['phone']).to.equal('string');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('phone')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['phone']).to.equal('string');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"phone not found in responseBody\");\n\t\t\t}\n\t\t});\n\t\tpm.test(\"userStatus has correct data type\", function () {\n\t\t\tif (responseBody.hasOwnProperty('userStatus')) {\n\t\t\t\tpm.expect(typeof responseBody['userStatus']).to.equal('number');\n\t\t\t} else if (Array.isArray(responseBody) && responseBody.length > 0 && responseBody[0].hasOwnProperty('userStatus')) {\n\t\t\t\tpm.expect(typeof responseBody[0]['userStatus']).to.equal('number');\n\t\t\t} else {\n\t\t\t\tpm.expect.fail(\"userStatus not found in responseBody\");\n\t\t\t}\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Get user by user name-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/{{username}}",
        "method": "GET",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Get user by user name-404 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/-1",
        "method": "GET",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 404\", function () {\n\t\t\tpm.response.to.have.status(404);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete user-400 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/{{username}}",
        "method": "DELETE",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 400\", function () {\n\t\t\tpm.response.to.have.status(400);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete user-404 Status",
      "request": {
        "url": "https://petstore3.swagger.io/api/v3/user/-1",
        "method": "DELETE",
        "auth": {}
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "\t\tpm.test(\"Status code is 404\", function () {\n\t\t\tpm.response.to.have.status(404);\n\t\t});\n\n\t\t\tpm.test(\"Response time is less than 500ms\", function () {\n\t\t\t\tpm.expect(pm.response.responseTime).to.be.below(500);\n\t\t\t});\n"
            ]
          }
        }
      ]
    }
  ],
  "event": []
}